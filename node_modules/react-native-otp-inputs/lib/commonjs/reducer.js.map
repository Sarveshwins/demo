{"version":3,"sources":["reducer.ts"],"names":["ACTION_TYPES","setHandleChange","setOtpTextForIndex","setOtpCode","clearOtp","setHasKeySupport","state","type","payload","otpCode","index","text","handleChange","Object","values","join","numberOfInputs","code","hasKeySupport"],"mappings":";;;;;;;AAAA;;AAGA,MAAMA,YAAyB,GAAG;AAChCC,EAAAA,eAAe,EAAE,iBADe;AAEhCC,EAAAA,kBAAkB,EAAE,oBAFY;AAGhCC,EAAAA,UAAU,EAAE,YAHoB;AAIhCC,EAAAA,QAAQ,EAAE,UAJsB;AAKhCC,EAAAA,gBAAgB,EAAE;AALc,CAAlC;;eAQe,CAACC,KAAD,EAAsB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAtB,KAAqD;AAClE,UAAQD,IAAR;AACE,SAAKP,YAAY,CAACE,kBAAlB;AAAsC;AACpC,cAAMO,OAAO,GAAG,EACd,GAAGH,KAAK,CAACG,OADK;AAEd,WAAE,GAAED,OAAO,CAACE,KAAM,EAAlB,GAAsBF,OAAO,CAACG;AAFhB,SAAhB;AAIAL,QAAAA,KAAK,CAACM,YAAN,CAAmBC,MAAM,CAACC,MAAP,CAAcL,OAAd,EAAuBM,IAAvB,CAA4B,EAA5B,CAAnB;AAEA,eAAO,EACL,GAAGT,KADE;AAELG,UAAAA;AAFK,SAAP;AAID;;AAED,SAAKT,YAAY,CAACG,UAAlB;AAA8B;AAC5B,cAAMM,OAAO,GAAG,0BAAYD,OAAO,CAACQ,cAApB,EAAoCR,OAAO,CAACS,IAA5C,CAAhB;AAEAX,QAAAA,KAAK,CAACM,YAAN,CAAmBC,MAAM,CAACC,MAAP,CAAcL,OAAd,EAAuBM,IAAvB,CAA4B,EAA5B,CAAnB;AAEA,eAAO,EACL,GAAGT,KADE;AAELG,UAAAA;AAFK,SAAP;AAID;;AAED,SAAKT,YAAY,CAACI,QAAlB;AAA4B;AAC1B,cAAMK,OAAO,GAAG,0BAAYD,OAAZ,CAAhB;AACAF,QAAAA,KAAK,CAACM,YAAN,CAAmBC,MAAM,CAACC,MAAP,CAAcL,OAAd,EAAuBM,IAAvB,CAA4B,EAA5B,CAAnB;AAEA,eAAO,EAAE,GAAGT,KAAL;AAAYG,UAAAA;AAAZ,SAAP;AACD;;AAED,SAAKT,YAAY,CAACC,eAAlB;AAAmC;AACjC,eAAO,EAAE,GAAGK,KAAL;AAAYM,UAAAA,YAAY,EAAEJ;AAA1B,SAAP;AACD;;AAED,SAAKR,YAAY,CAACK,gBAAlB;AAAoC;AAClC,eAAO,EAAE,GAAGC,KAAL;AAAYY,UAAAA,aAAa,EAAEV;AAA3B,SAAP;AACD;;AAED;AACE,aAAOF,KAAP;AAzCJ;AA2CD,C","sourcesContent":["import { fillOtpCode } from './helpers';\nimport { Actions, ActionTypes, ReducerState } from './types';\n\nconst ACTION_TYPES: ActionTypes = {\n  setHandleChange: 'setHandleChange',\n  setOtpTextForIndex: 'setOtpTextForIndex',\n  setOtpCode: 'setOtpCode',\n  clearOtp: 'clearOtp',\n  setHasKeySupport: 'setHasKeySupport',\n};\n\nexport default (state: ReducerState, { type, payload }: Actions) => {\n  switch (type) {\n    case ACTION_TYPES.setOtpTextForIndex: {\n      const otpCode = {\n        ...state.otpCode,\n        [`${payload.index}`]: payload.text,\n      };\n      state.handleChange(Object.values(otpCode).join(''));\n\n      return {\n        ...state,\n        otpCode,\n      };\n    }\n\n    case ACTION_TYPES.setOtpCode: {\n      const otpCode = fillOtpCode(payload.numberOfInputs, payload.code);\n\n      state.handleChange(Object.values(otpCode).join(''));\n\n      return {\n        ...state,\n        otpCode,\n      };\n    }\n\n    case ACTION_TYPES.clearOtp: {\n      const otpCode = fillOtpCode(payload);\n      state.handleChange(Object.values(otpCode).join(''));\n\n      return { ...state, otpCode };\n    }\n\n    case ACTION_TYPES.setHandleChange: {\n      return { ...state, handleChange: payload };\n    }\n\n    case ACTION_TYPES.setHasKeySupport: {\n      return { ...state, hasKeySupport: payload };\n    }\n\n    default:\n      return state;\n  }\n};\n"]}