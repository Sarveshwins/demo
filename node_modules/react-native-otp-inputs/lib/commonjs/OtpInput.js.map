{"version":3,"sources":["OtpInput.tsx"],"names":["majorVersionIOS","parseInt","Platform","Version","isOTPSupported","OS","OtpInput","autoFocus","focusStyles","handleKeyPress","handleTextChange","inputContainerStyles","inputStyles","inputValue","placeholder","selectTextOnFocus","secureTextEntry","rest","ref","focused","setFocused","current","setNativeProps","value","text","restProps","select","default","web","ios","android","React","memo"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAuBA,MAAMA,eAAuB,GAAGC,QAAQ,CAAE,GAAEC,sBAASC,OAAQ,EAArB,EAAwB,EAAxB,CAAxC;AACA,MAAMC,cAAuB,GAAGF,sBAASG,EAAT,KAAgB,KAAhB,IAAyBL,eAAe,IAAI,EAA5E;AAEA,MAAMM,QAAQ,gBAAG,uBACf,CACE;AACEC,EAAAA,SADF;AAEEC,EAAAA,WAFF;AAGEC,EAAAA,cAHF;AAIEC,EAAAA,gBAJF;AAKEC,EAAAA,oBALF;AAMEC,EAAAA,WANF;AAOEC,EAAAA,UAPF;AAQEC,EAAAA,WARF;AASEC,EAAAA,iBATF;AAUEC,EAAAA,eAVF;AAWE,KAAGC;AAXL,CADF,EAcEC,GAdF,KAeK;AACH,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwB,qBAAS,KAAT,CAA9B;AAEA,wBAAU,MAAM;AAAA;;AACbF,IAAAA,GAAD,aAACA,GAAD,mCAACA,GAAD,CAA+BG,OAA/B,sDAAwCC,cAAxC,CAAuD;AACrDC,MAAAA,KAAK,EAAEV,UAD8C;AAErDW,MAAAA,IAAI,EAAEX;AAF+C,KAAvD;AAID,GALD,EAKG,CAACK,GAAD,EAAML,UAAN,CALH;AAOA,QAAMY,SAAS,GAAG,oBAChB,MACEvB,sBAASwB,MAAT,CAAgB;AACdC,IAAAA,OAAO,EAAEV,IADK;AAEdW,IAAAA,GAAG,EAAE;AAAEL,MAAAA,KAAK,EAAEV,UAAT;AAAqB,SAAGI;AAAxB;AAFS,GAAhB,CAFc,EAMhB,CAACJ,UAAD,EAAaI,IAAb,CANgB,CAAlB;AASA,sBACE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAACN,oBAAD,EAAuBQ,OAAO,IAAIX,WAAlC;AAAb,kBACE,6BAAC,sBAAD;AACE,IAAA,SAAS,EAAED,SADb;AAEE,IAAA,MAAM,EAAE,MAAMa,UAAU,CAAC,KAAD,CAF1B;AAGE,IAAA,YAAY,EAAEV,gBAHhB;AAIE,IAAA,OAAO,EAAE,MAAMU,UAAU,CAAC,IAAD,CAJ3B;AAKE,IAAA,UAAU,EAAEX,cALd;AAME,IAAA,WAAW,EAAEK,WANf;AAOE,IAAA,GAAG,EAAEI,GAPP;AAQE,IAAA,eAAe,EAAEF,eARnB,CASE;AATF;AAUE,IAAA,iBAAiB,EAAEd,sBAASwB,MAAT,CAAgB;AACjCG,MAAAA,GAAG,EAAEd,iBAD4B;AAEjCe,MAAAA,OAAO,EAAE;AAFwB,KAAhB,CAVrB;AAcE,IAAA,KAAK,EAAElB,WAdT;AAeE,IAAA,eAAe,EAAER,cAAc,GAAG,aAAH,GAAmB,MAfpD;AAgBE,IAAA,qBAAqB,EAAC;AAhBxB,KAiBMqB,SAjBN,EADF,CADF;AAuBD,CA1Dc,CAAjB;;4BA6DeM,eAAMC,IAAN,CAAW1B,QAAX,C","sourcesContent":["import React, { forwardRef, RefObject, useEffect, useMemo, useState } from 'react';\nimport {\n  NativeSyntheticEvent,\n  Platform,\n  StyleProp,\n  TextInput,\n  TextInputKeyPressEventData,\n  TextInputProps,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\ntype Props = TextInputProps & {\n  inputContainerStyles?: StyleProp<ViewStyle>;\n  firstInput: boolean;\n  focusStyles?: StyleProp<ViewStyle>;\n  inputStyles?: StyleProp<TextStyle>;\n  numberOfInputs: number;\n  handleTextChange: (text: string) => void;\n  inputValue: string;\n  handleKeyPress: (keyPressEvent: NativeSyntheticEvent<TextInputKeyPressEventData>) => void;\n};\n\nconst majorVersionIOS: number = parseInt(`${Platform.Version}`, 10);\nconst isOTPSupported: boolean = Platform.OS === 'ios' && majorVersionIOS >= 12;\n\nconst OtpInput = forwardRef<TextInput, Props>(\n  (\n    {\n      autoFocus,\n      focusStyles,\n      handleKeyPress,\n      handleTextChange,\n      inputContainerStyles,\n      inputStyles,\n      inputValue,\n      placeholder,\n      selectTextOnFocus,\n      secureTextEntry,\n      ...rest\n    },\n    ref,\n  ) => {\n    const [focused, setFocused] = useState(false);\n\n    useEffect(() => {\n      (ref as RefObject<TextInput>)?.current?.setNativeProps({\n        value: inputValue,\n        text: inputValue,\n      });\n    }, [ref, inputValue]);\n\n    const restProps = useMemo(\n      () =>\n        Platform.select({\n          default: rest,\n          web: { value: inputValue, ...rest },\n        }),\n      [inputValue, rest],\n    );\n\n    return (\n      <View style={[inputContainerStyles, focused && focusStyles]}>\n        <TextInput\n          autoFocus={autoFocus}\n          onBlur={() => setFocused(false)}\n          onChangeText={handleTextChange}\n          onFocus={() => setFocused(true)}\n          onKeyPress={handleKeyPress}\n          placeholder={placeholder}\n          ref={ref}\n          secureTextEntry={secureTextEntry}\n          // https://github.com/facebook/react-native/issues/18339\n          selectTextOnFocus={Platform.select({\n            ios: selectTextOnFocus,\n            android: true,\n          })}\n          style={inputStyles}\n          textContentType={isOTPSupported ? 'oneTimeCode' : 'none'}\n          underlineColorAndroid=\"transparent\"\n          {...restProps}\n        />\n      </View>\n    );\n  },\n);\n\nexport default React.memo(OtpInput);\n"]}