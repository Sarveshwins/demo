{"version":3,"sources":["index.tsx"],"names":["Clipboard","React","forwardRef","useCallback","useEffect","useImperativeHandle","useReducer","useRef","Keyboard","Platform","StyleSheet","View","fillOtpCode","OtpInput","reducer","OtpInputsRef","supportAutofillFromClipboard","OS","parseInt","Version","styles","create","container","alignItems","flex","flexDirection","justifyContent","OtpInputs","autoFocus","autofillFromClipboard","autofillListenerIntervalMS","autoCapitalize","clearTextOnFocus","defaultValue","focusStyles","handleChange","console","log","inputContainerStyles","inputStyles","isRTL","keyboardType","numberOfInputs","placeholder","secureTextEntry","selectTextOnFocus","style","testIDPrefix","restProps","ref","previousCopiedText","inputs","otpCode","hasKeySupport","dispatch","type","payload","code","reset","current","forEach","input","clear","setString","focus","firstInput","handleInputTextChange","text","index","length","handleClearInput","dismiss","fillInputs","focusInput","handleTextChange","handleKeyPress","nativeEvent","key","isNaN","inputIndex","listenOnCopiedText","copiedText","getString","otpCodeValue","Object","values","join","interval","setInterval","clearInterval","renderInputs","iterationArray","Array","fill","map","_","inputValue","createRef","keyPressEvent","select","android","ios"],"mappings":"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","sourcesContent":["import Clipboard from '@react-native-clipboard/clipboard';\nimport React, {\n  forwardRef,\n  RefObject,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useReducer,\n  useRef,\n} from 'react';\nimport {\n  Keyboard,\n  NativeSyntheticEvent,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextInput,\n  TextInputKeyPressEventData,\n  TextInputProps,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { fillOtpCode } from './helpers';\nimport OtpInput from './OtpInput';\nimport reducer from './reducer';\nimport { OtpInputsRef, SupportedKeyboardType } from './types';\n\nconst supportAutofillFromClipboard =\n  Platform.OS === 'android' || parseInt(Platform.Version as string, 10) < 14;\n\ntype Props = TextInputProps & {\n  autofillFromClipboard: boolean;\n  autofillListenerIntervalMS?: number;\n  keyboardType?: SupportedKeyboardType;\n  style?: StyleProp<ViewStyle>;\n  focusStyles?: StyleProp<ViewStyle>;\n  defaultValue?: string;\n  handleChange: (otpCode: string) => void;\n  inputContainerStyles?: StyleProp<ViewStyle>;\n  inputStyles?: StyleProp<TextStyle>;\n  isRTL?: boolean;\n  numberOfInputs: number;\n  testIDPrefix?: string;\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n});\n\nconst OtpInputs = forwardRef<OtpInputsRef, Props>(\n  (\n    {\n      autoFocus,\n      autofillFromClipboard = supportAutofillFromClipboard,\n      autofillListenerIntervalMS = 1000,\n      autoCapitalize = 'none',\n      clearTextOnFocus = false,\n      defaultValue,\n      focusStyles,\n      handleChange = console.log,\n      inputContainerStyles,\n      inputStyles,\n      isRTL = false,\n      keyboardType = 'phone-pad',\n      numberOfInputs = 4,\n      placeholder = '',\n      secureTextEntry = false,\n      selectTextOnFocus = true,\n      style,\n      testIDPrefix = 'otpInput',\n      ...restProps\n    },\n    ref,\n  ) => {\n    const previousCopiedText = useRef<string>('');\n    const inputs = useRef<Array<RefObject<TextInput>>>([]);\n    const [{ otpCode, hasKeySupport }, dispatch] = useReducer(reducer, {}, () => ({\n      otpCode: fillOtpCode(numberOfInputs, defaultValue),\n      handleChange,\n      hasKeySupport: Platform.OS === 'ios',\n    }));\n\n    useEffect(() => {\n      if (defaultValue) {\n        dispatch({\n          type: 'setOtpCode',\n          payload: { numberOfInputs, code: defaultValue },\n        });\n      }\n    }, [defaultValue, numberOfInputs]);\n\n    useEffect(() => {\n      dispatch({ type: 'setHandleChange', payload: handleChange });\n    }, [handleChange]);\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        reset: (): void => {\n          dispatch({ type: 'clearOtp', payload: numberOfInputs });\n          inputs.current.forEach((input) => input?.current?.clear());\n          previousCopiedText.current = '';\n          Clipboard.setString('');\n        },\n        focus: (): void => {\n          const firstInput = inputs.current[0];\n          firstInput?.current?.focus();\n        },\n      }),\n      [numberOfInputs],\n    );\n\n    const handleInputTextChange = (text: string, index: number): void => {\n      if (!text.length) {\n        handleClearInput(index);\n      }\n\n      if (text.length > 1) {\n        handleClearInput(index);\n        Keyboard.dismiss();\n        return fillInputs(text);\n      }\n\n      if (text) {\n        dispatch({\n          type: 'setOtpTextForIndex',\n          payload: {\n            text,\n            index,\n          },\n        });\n        focusInput(index + 1);\n      }\n\n      if (index === numberOfInputs - 1 && text) {\n        Keyboard.dismiss();\n      }\n    };\n\n    const handleTextChange = (text: string, index: number) => {\n      if (\n        (Platform.OS === 'android' && !hasKeySupport) ||\n        // Pasted from input accessory\n        (Platform.OS === 'ios' && text.length > 1)\n      ) {\n        handleInputTextChange(text, index);\n      }\n    };\n\n    const handleKeyPress = (\n      { nativeEvent: { key } }: NativeSyntheticEvent<TextInputKeyPressEventData>,\n      index: number,\n    ) => {\n      const text = key === 'Backspace' || key.length > 1 ? '' : key;\n      handleInputTextChange(text, index);\n\n      if (Platform.OS === 'android' && !hasKeySupport && !isNaN(parseInt(key)))\n        dispatch({ type: 'setHasKeySupport', payload: true });\n    };\n\n    const focusInput = useCallback(\n      (index: number): void => {\n        if (index >= 0 && index < numberOfInputs) {\n          const input = inputs.current[index];\n          input?.current?.focus();\n        }\n      },\n      [numberOfInputs],\n    );\n\n    const handleClearInput = useCallback(\n      (inputIndex: number) => {\n        const input = inputs.current[inputIndex];\n        input?.current?.clear();\n        dispatch({\n          type: 'setOtpTextForIndex',\n          payload: {\n            index: inputIndex,\n            text: '',\n          },\n        });\n        focusInput(inputIndex - 1);\n      },\n      [focusInput],\n    );\n\n    const fillInputs = useCallback(\n      (code: string) => {\n        dispatch({\n          type: 'setOtpCode',\n          payload: { numberOfInputs, code },\n        });\n      },\n      [numberOfInputs],\n    );\n\n    const listenOnCopiedText = useCallback(async (): Promise<void> => {\n      const copiedText = await Clipboard.getString();\n      const otpCodeValue = Object.values(otpCode).join('');\n\n      if (\n        copiedText?.length === numberOfInputs &&\n        copiedText !== otpCodeValue &&\n        copiedText !== previousCopiedText.current\n      ) {\n        previousCopiedText.current = copiedText;\n        fillInputs(copiedText);\n      }\n    }, [fillInputs, numberOfInputs, otpCode]);\n\n    useEffect(() => {\n      let interval: NodeJS.Timeout;\n\n      if (autofillFromClipboard) {\n        interval = setInterval(() => {\n          listenOnCopiedText();\n        }, autofillListenerIntervalMS);\n      }\n\n      return () => {\n        clearInterval(interval);\n      };\n    }, [autofillFromClipboard, autofillListenerIntervalMS, listenOnCopiedText, numberOfInputs]);\n\n    const renderInputs = (): Array<JSX.Element> => {\n      const iterationArray = Array<number>(numberOfInputs).fill(0);\n\n      return iterationArray.map((_, index) => {\n        let inputIndex = index;\n        if (isRTL) {\n          inputIndex = numberOfInputs - 1 - index;\n        }\n        const inputValue = otpCode[`${inputIndex}`];\n\n        if (!inputs.current[inputIndex]) {\n          inputs.current[inputIndex] = React.createRef<TextInput>();\n        }\n\n        return (\n          <OtpInput\n            accessible\n            accessibilityLabel={`${testIDPrefix}-${inputIndex}`}\n            autoCapitalize={autoCapitalize}\n            autoFocus={index === 0 && autoFocus}\n            clearTextOnFocus={clearTextOnFocus}\n            firstInput={index === 0}\n            focusStyles={focusStyles}\n            handleKeyPress={(keyPressEvent: NativeSyntheticEvent<TextInputKeyPressEventData>) =>\n              handleKeyPress(keyPressEvent, inputIndex)\n            }\n            handleTextChange={(text: string) => handleTextChange(text, inputIndex)}\n            inputContainerStyles={inputContainerStyles}\n            inputStyles={inputStyles}\n            inputValue={inputValue}\n            key={inputIndex}\n            keyboardType={keyboardType}\n            maxLength={Platform.select({\n              android: 1,\n              ios: index === 0 ? numberOfInputs : 1,\n            })}\n            numberOfInputs={numberOfInputs}\n            placeholder={placeholder}\n            ref={inputs.current[inputIndex]}\n            secureTextEntry={secureTextEntry}\n            selectTextOnFocus={selectTextOnFocus}\n            testID={`${testIDPrefix}-${inputIndex}`}\n            {...restProps}\n          />\n        );\n      });\n    };\n\n    return <View style={style || styles.container}>{renderInputs()}</View>;\n  },\n);\n\nexport { OtpInputsRef };\nexport default OtpInputs;\n"]}